package HomeWorks.hw_6;

/**
 * 6. Принципы ООП
 * Задание для домашней работы по принципам ООП на примере классов WheeledTransport, Bicycle, MotorTransport, Car и Truck:
 * <p>
 * 1. Создайте класс WheeledTransport, который будет представлять колесный транспорт.
 * У класса должны быть приватные переменные для хранения количества колес и максимальной скорости
 * (поля задавайте сразу в конструкторе класса, так же делайте для полей последующих классов).
 * Реализуйте геттеры и сеттеры для этих переменных. Объявите метод service() для обслуживания,
 * который будет выводить информацию об обслуживании колёс (с указанием их количества, конечно, же),
 * например sout(“Обслужено колёс - ” + wheelCount);
 * <p>
 * 2. Создайте класс Bicycle, который будет наследоваться от класса WheeledTransport.
 * Добавьте приватную переменную для хранения типа велосипеда (горный, шоссейный и т.д.).
 * Реализуйте геттеры и сеттеры для этой переменной. Переопределите метод service(),
 * чтобы он возвращал информацию о типе обслуженного велосипеда (например, обслужено навесное оборудование
 * велосипеда типа «шоссейный»).
 * <p>
 * Внимание! Колеса тоже ведь нужно обслужить. Для этого в переопределенном методе service () сначала вызовите такой же
 * метод суперкласса super.service(), а потом уже выводите информацию о типе велосипеда.
 * <p>
 * 3. Создайте класс MotorTransport, который будет наследоваться от класса WheeledTransport. Добавьте приватную переменную
 * для хранения типа двигателя (бензиновый, дизельный и т.д.). Реализуйте геттеры и сеттеры для этой переменной. Аналогично
 * переопределите метод service(), чтобы он возвращал информацию об обслуживании двигателя и его типа (не забываем про колёса
 * из суперкласса).
 * <p>
 * 4. Создайте класс Car, который будет наследоваться от класса MotorTransport. Добавьте приватные переменные для хранения
 * марки и модели автомобиля. Реализуйте геттеры и сеттеры для этих переменных. Аналогично переопределите метод service()
 * <p>
 * 5. Создайте класс Truck, который будет наследоваться от класса MotorTransport. Добавьте приватную переменную для хранения
 * грузоподъемности грузовика. Реализуйте геттеры и сеттеры для этой переменной. Аналогично переопределите метод service()
 * <p>
 * 6. В методе main создайте объекты классов Bicycle, Car и Truck и передавайте их как параметры в метод visitServiceStation
 * (сами подставьте нужный тип параметра), внутри которого вызовите метод service() для каждого объекта
 */
public class Main {
    public static void main(String[] args) {
        Bicycle bicycle01 = new Bicycle(2, 40, "cross - country");
//        bicycle1.service();


        Car car01 = new Car(4, 180, "бензин", "BMW", "X5m");
//        car.service();
//
        Truck truck01 = new Truck(16, 160, "diesel", 20);
//        truck.service();


        visitServiceStation(bicycle01);
        System.out.println("////////////////////////");
        visitServiceStation(car01);
        System.out.println("////////////////////////");
        visitServiceStation(truck01);
        System.out.println("////////////////////////");

    }

    public static void visitServiceStation(WheeledTransport wheeledTransport) {
        wheeledTransport.service();
    }


}
